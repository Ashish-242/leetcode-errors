class Solution {
  public int minMalwareSpread(int[][] graph, int[] initial) {
  int n=graph.length;
  parent=new int[n];
  size=new int[n];
  for(int i=0;i<parent.length;i++){
      parent[i]=i;
      size[i]=1;
  }
  for(int i=0;i<graph.length;i++){
      for(int j=0;j<graph[0].length;j++){
          if(graph[i][j]==1){
              int p1=find(parent,i);
              int p2=find(parent,j);
              if(p1!=p2){
                  union(p1,p2);
              }
          }
      }
  }
  
  
  int[] infected=new int[n];
  for(int e:initial){
      int p=find(parent,e);
      infected[p]++;
  }
  int ans=-1;
  int maxsize=-1;
  for(int e:initial){
      int p=find(parent,e);
      if(infected[p]==1 && size[p]>=maxsize){
          if(maxsize==size[p]){
         ans=Math.min(ans,e);
          }else{
              ans=e;
          }
          maxsize=size[p];
      }
  }
  if(ans==-1){
      int min=n+1;
      for(int e:initial){
          min=Math.min(min,e);
      }
      return min;
  }
  return ans;
  
  }
    static int[] parent;
    static int[] size;
    public  void union(int s1l, int s2l){
       if(size[s1l] < size[s2l]){
           parent[s1l] = s2l;
           size[s2l]+=size[s1l];
       } else if(size[s2l] < size[s1l]){
           parent[s2l] = s1l;
            size[s1l]+=size[s2l];
       } else {
           parent[s1l] = s2l;
           size[s2l]+=size[s1l];
       }
   }
  public  int find(int[] parent, int f) {
  if(parent[f]==f) return f;
  parent[f]=find(parent,parent[f]);
  return parent[f];
  }
}